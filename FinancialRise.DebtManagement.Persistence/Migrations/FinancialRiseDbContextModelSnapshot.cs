// <auto-generated />
using System;
using FinancialRise.DebtManagement.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FinancialRise.DebtManagement.Persistence.Migrations
{
    [DbContext(typeof(FinancialRiseDbContext))]
    partial class FinancialRiseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("GoalId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("GoalId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DebtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContactId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DebtId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            ContactId = new Guid("6ef244de-a44f-4f08-91fb-7c0445ea7807"),
                            Address = "ul. Grochowa 24, 65-901 Warszawa",
                            CreatedBy = "SeedingData",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 55, 9, 908, DateTimeKind.Local).AddTicks(3237),
                            DebtId = new Guid("1ef244de-a44f-4f08-91fb-7c0445ea7802"),
                            Email = "mkapusta@gmail.com",
                            Name = "Repossession Man",
                            PhoneNumber = "48789453784",
                            UserId = new Guid("62787623-4c52-43fe-b0c9-b7044fb5929b")
                        });
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.DailyOperation", b =>
                {
                    b.Property<Guid>("DailyOperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Operation")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DailyOperationId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("DailyOperations");

                    b.HasData(
                        new
                        {
                            DailyOperationId = new Guid("6ef244de-a44f-4f08-91fb-7c0445ea7807"),
                            Amount = -300.5m,
                            CreatedBy = "SeedingData",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 55, 9, 908, DateTimeKind.Local).AddTicks(5718),
                            Name = "Dinner",
                            Operation = 2,
                            UserId = new Guid("62787623-4c52-43fe-b0c9-b7044fb5929b")
                        },
                        new
                        {
                            DailyOperationId = new Guid("6ef244de-a44f-4f08-91fb-7c0445ea7801"),
                            Amount = 400m,
                            CreatedBy = "SeedingData",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 55, 9, 908, DateTimeKind.Local).AddTicks(5870),
                            Name = "From salary",
                            Operation = 1,
                            UserId = new Guid("62787623-4c52-43fe-b0c9-b7044fb5929b")
                        });
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Debt", b =>
                {
                    b.Property<Guid>("DebtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FirstInstalment")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FlatInstalment")
                        .HasColumnType("bit");

                    b.Property<Guid>("FrequencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Instalment")
                        .HasColumnType("money");

                    b.Property<double>("InterestRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("LastInstalment")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("money");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Total")
                        .HasColumnType("money");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DebtId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FrequencyId");

                    b.ToTable("Debts");

                    b.HasData(
                        new
                        {
                            DebtId = new Guid("1ef244de-a44f-4f08-91fb-7c0445ea7802"),
                            CreatedBy = "SeedingData",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 55, 9, 908, DateTimeKind.Local).AddTicks(551),
                            FirstInstalment = new DateTime(2022, 5, 24, 10, 55, 9, 906, DateTimeKind.Local).AddTicks(757),
                            FlatInstalment = true,
                            FrequencyId = new Guid("2ef244de-a44f-4f08-91fb-7c0445ea7804"),
                            Instalment = 1703.35m,
                            InterestRate = 4.7000000000000002,
                            LastInstalment = new DateTime(2047, 5, 24, 10, 55, 9, 907, DateTimeKind.Local).AddTicks(9810),
                            LoanAmount = 300000m,
                            Name = "Mortgage",
                            Total = 511005m,
                            UserId = new Guid("62787623-4c52-43fe-b0c9-b7044fb5929b")
                        });
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Frequency", b =>
                {
                    b.Property<Guid>("FrequencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FrequencyId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Frequencies");

                    b.HasData(
                        new
                        {
                            FrequencyId = new Guid("2ef244de-a44f-4f08-91fb-7c0445ea7804"),
                            Number = 1,
                            Unit = 2,
                            UserId = new Guid("62787623-4c52-43fe-b0c9-b7044fb5929b")
                        });
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Goal", b =>
                {
                    b.Property<Guid>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GoalId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Goals");

                    b.HasData(
                        new
                        {
                            GoalId = new Guid("3ef244de-a44f-4f08-91fb-7c0445ea7802"),
                            Amount = 511005m,
                            CreatedBy = "SeedingData",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 55, 9, 908, DateTimeKind.Local).AddTicks(8092),
                            Deadline = new DateTime(2047, 5, 24, 10, 55, 9, 908, DateTimeKind.Local).AddTicks(7820),
                            Description = "Evry goal is possible to achieve, the question is how to do thisand what can I sacrifice to get on top (For sure not your health and other people!In our world we have endless possibilities, try one)?",
                            Title = "Debt repayment",
                            UserId = new Guid("62787623-4c52-43fe-b0c9-b7044fb5929b")
                        });
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Income", b =>
                {
                    b.Property<Guid>("IncomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FirstRemit")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FrequencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastRemit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IncomeId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FrequencyId");

                    b.ToTable("Incomes");

                    b.HasData(
                        new
                        {
                            IncomeId = new Guid("42787623-4c52-43fe-b0c9-b7044fb5929b"),
                            Amount = 8000m,
                            CreatedBy = "SeedingData",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 55, 9, 909, DateTimeKind.Local).AddTicks(286),
                            FirstRemit = new DateTime(2022, 5, 24, 10, 55, 9, 909, DateTimeKind.Local).AddTicks(146),
                            FrequencyId = new Guid("2ef244de-a44f-4f08-91fb-7c0445ea7804"),
                            LastRemit = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Salary",
                            UserId = new Guid("62787623-4c52-43fe-b0c9-b7044fb5929b")
                        });
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Note", b =>
                {
                    b.Property<Guid>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeOfNote")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NoteId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            NoteId = new Guid("5ef244de-a44f-4f08-91fb-7c0445ea7804"),
                            Content = "I devote myself to achieving the main goal and appreciate this path every day, find joy in every progress' step",
                            CreatedBy = "SeedingData",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 55, 9, 909, DateTimeKind.Local).AddTicks(1908),
                            TypeOfNote = 3,
                            UserId = new Guid("62787623-4c52-43fe-b0c9-b7044fb5929b")
                        });
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Outcome", b =>
                {
                    b.Property<Guid>("OutcomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FirstRemit")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FrequencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastRemit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OutcomeId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("FrequencyId");

                    b.ToTable("Outcomes");

                    b.HasData(
                        new
                        {
                            OutcomeId = new Guid("6ef244de-a44f-4f08-91fb-7c0445ea7804"),
                            Amount = 600m,
                            CreatedBy = "SeedingData",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 55, 9, 909, DateTimeKind.Local).AddTicks(3258),
                            FirstRemit = new DateTime(2022, 5, 24, 10, 55, 9, 909, DateTimeKind.Local).AddTicks(3249),
                            FrequencyId = new Guid("2ef244de-a44f-4f08-91fb-7c0445ea7804"),
                            LastRemit = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Utility bills",
                            UserId = new Guid("62787623-4c52-43fe-b0c9-b7044fb5929b")
                        });
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Saving", b =>
                {
                    b.Property<Guid>("SavingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalSaving")
                        .HasColumnType("money");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SavingId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Savings");

                    b.HasData(
                        new
                        {
                            SavingId = new Guid("7ef244de-a44f-4f08-91fb-7c0445ea7802"),
                            CreatedBy = "SeedingData",
                            CreatedDate = new DateTime(2022, 5, 24, 10, 55, 9, 909, DateTimeKind.Local).AddTicks(3940),
                            TotalSaving = 0m,
                            UserId = new Guid("62787623-4c52-43fe-b0c9-b7044fb5929b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GoalId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GoalId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Contact", b =>
                {
                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.Debt", "Debt")
                        .WithMany("Contacts")
                        .HasForeignKey("DebtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Debt");
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.DailyOperation", b =>
                {
                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Debt", b =>
                {
                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.Frequency", "InstalmentFrequency")
                        .WithMany("Debts")
                        .HasForeignKey("FrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("InstalmentFrequency");
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Frequency", b =>
                {
                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Goal", b =>
                {
                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Income", b =>
                {
                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.Frequency", "Frequency")
                        .WithMany("Incomes")
                        .HasForeignKey("FrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Frequency");
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Note", b =>
                {
                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Outcome", b =>
                {
                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.Frequency", "Frequency")
                        .WithMany("Outcomes")
                        .HasForeignKey("FrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Frequency");
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Saving", b =>
                {
                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FinancialRise.DebtManagement.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Debt", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("FinancialRise.DebtManagement.Domain.Entities.Frequency", b =>
                {
                    b.Navigation("Debts");

                    b.Navigation("Incomes");

                    b.Navigation("Outcomes");
                });
#pragma warning restore 612, 618
        }
    }
}
